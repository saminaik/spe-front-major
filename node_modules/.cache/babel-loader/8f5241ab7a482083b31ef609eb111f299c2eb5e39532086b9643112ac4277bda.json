{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport { Form, Button } from 'react-bootstrap';\nimport { useLocation, navigate } from 'react-router-dom';\nexport default function PatientBookAppointment() {\n  _s();\n  const location = useLocation();\n  console.log(\"hello\");\n  console.log(location.state.id.id.token);\n  const patientId = location.state;\n\n  //const token=location.state.id.id.token;\n  // console.log(token)\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    loadUsers();\n  }, []);\n  const loadUsers = async () => {\n    try {\n      const result = await axios.get(\"http://localhost:8081/api/admin/doctors\", {\n        headers: {\n          \"Authorization\": `Bearer ${location.state.id.id.token}`\n        }\n      });\n      const updatedUsers = result.data.map(user => ({\n        ...user,\n        selectedDate: ''\n      }));\n      setUsers(updatedUsers);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // const handleChange = (event, index) => {\n  //   const { name, value } = event.target;\n  //   const updatedUsers = [...users];\n  //   updatedUsers[index] = { ...updatedUsers[index], selectedDate: value };\n  //   setUsers(updatedUsers);\n  // };\n\n  // const handleAppointmentBooking = (user, patientId) => {\n  //   // Check if the selectedDate is not empty\n  //   if (!user.selectedDate) {\n  //     return;\n  //   }\n  //   console.log(location.state);\n  //   // Send a POST request to the API with the required data\n  //   axios.post('http://localhost:8081/api/patients/appointments', {\n  //     doctorId: user.id,\n  //     patient_id: location.state.id.id.patient.id,\n  //     date: user.selectedDate\n  // }, {\n  //     headers: {\"Authorization\" : `Bearer ${location.state.id.id.token}`}\n  // })\n\n  //   .then(response => {\n  //     console.log(response.data); // Handle the response from the API as required\n  //   })\n  //   .catch(error => {\n  //     console.log(user.selectedDate);\n  //     console.log(user.id);\n  //     console.error(error); // Handle any errors that occurred during the request\n  //   });\n  // }\n\n  // return (\n  //   <div className='container'>\n  //     <div className='py-4'>\n  //       <table className=\"table border shadow\">\n  //         <thead>\n  //           <tr>\n  //             <th scope=\"col\">#</th>\n  //             <th scope=\"col\">Name</th>\n  //             <th scope=\"col\">Specialization</th>\n  //             <th scope=\"col\">Timing</th>\n  //             <th scope=\"col\">Date for of Consultation</th>\n  //             <th scope=\"col\">Action</th>\n  //           </tr>\n  //         </thead>\n  //         <tbody>\n  //           {users.map((user, index) => (\n  //             <tr key={user.id}>\n  //               <th scope=\"row\">{index + 1}</th>\n  //               <td>{user.name}</td>\n  //               <td>{user.specialization}</td>\n  //               <td>{user.timing}</td>\n  //               <td>\n  //                 <Form.Label>Registration Date:</Form.Label>\n  //                 <Form.Control type=\"datetime-local\" name=\"registrationDate\" value={user.selectedDate} onChange={(event) => handleChange(event, index)} step=\"1\" />\n\n  //               </td>\n  //               <td>\n  //                 <Button\n  //                   className='btn btn-primary mx-2'\n  //                   disabled={!user.selectedDate}\n  //                   onClick={() => handleAppointmentBooking(user)}\n  //                 >\n  //                   Book Appointment\n  //                 </Button>\n  //               </td>\n  //             </tr>\n  //           ))}\n  //         </tbody>\n  //       </table>\n  //     </div>\n  //   </div>\n  // )\n}\n_s(PatientBookAppointment, \"/OOGlzP22NbfGtOuYL5/OqAfmQk=\", false, function () {\n  return [useLocation];\n});\n_c = PatientBookAppointment;\nvar _c;\n$RefreshReg$(_c, \"PatientBookAppointment\");","map":{"version":3,"names":["React","useEffect","useState","axios","Form","Button","useLocation","navigate","PatientBookAppointment","_s","location","console","log","state","id","token","patientId","users","setUsers","loadUsers","result","get","headers","updatedUsers","data","map","user","selectedDate","error","_c","$RefreshReg$"],"sources":["/Users/samiullahnaikoo/Desktop/my-react-app/my-react-app/src/Pages/PatientBookAppoinment.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from \"axios\";\nimport { Form, Button } from 'react-bootstrap';\nimport { useLocation, navigate } from 'react-router-dom';\n\nexport default function PatientBookAppointment() {\n  const location = useLocation();\n  console.log(\"hello\");\n  console.log(location.state.id.id.token);\n  const patientId = location.state;\n\n  //const token=location.state.id.id.token;\n // console.log(token)\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = async () => {\n    try {\n      const result = await axios.get(\"http://localhost:8081/api/admin/doctors\", { headers: {\"Authorization\" : `Bearer ${location.state.id.id.token}`} });\n      const updatedUsers = result.data.map(user => ({ ...user, selectedDate: '' }));\n      setUsers(updatedUsers);\n    } catch (error) {\n   console.error(error);\n    }\n  };\n  \n  // const handleChange = (event, index) => {\n  //   const { name, value } = event.target;\n  //   const updatedUsers = [...users];\n  //   updatedUsers[index] = { ...updatedUsers[index], selectedDate: value };\n  //   setUsers(updatedUsers);\n  // };\n\n  // const handleAppointmentBooking = (user, patientId) => {\n  //   // Check if the selectedDate is not empty\n  //   if (!user.selectedDate) {\n  //     return;\n  //   }\n  //   console.log(location.state);\n  //   // Send a POST request to the API with the required data\n  //   axios.post('http://localhost:8081/api/patients/appointments', {\n  //     doctorId: user.id,\n  //     patient_id: location.state.id.id.patient.id,\n  //     date: user.selectedDate\n  // }, {\n  //     headers: {\"Authorization\" : `Bearer ${location.state.id.id.token}`}\n  // })\n  \n  //   .then(response => {\n  //     console.log(response.data); // Handle the response from the API as required\n  //   })\n  //   .catch(error => {\n  //     console.log(user.selectedDate);\n  //     console.log(user.id);\n  //     console.error(error); // Handle any errors that occurred during the request\n  //   });\n  // }\n\n \n\n  // return (\n  //   <div className='container'>\n  //     <div className='py-4'>\n  //       <table className=\"table border shadow\">\n  //         <thead>\n  //           <tr>\n  //             <th scope=\"col\">#</th>\n  //             <th scope=\"col\">Name</th>\n  //             <th scope=\"col\">Specialization</th>\n  //             <th scope=\"col\">Timing</th>\n  //             <th scope=\"col\">Date for of Consultation</th>\n  //             <th scope=\"col\">Action</th>\n  //           </tr>\n  //         </thead>\n  //         <tbody>\n  //           {users.map((user, index) => (\n  //             <tr key={user.id}>\n  //               <th scope=\"row\">{index + 1}</th>\n  //               <td>{user.name}</td>\n  //               <td>{user.specialization}</td>\n  //               <td>{user.timing}</td>\n  //               <td>\n  //                 <Form.Label>Registration Date:</Form.Label>\n  //                 <Form.Control type=\"datetime-local\" name=\"registrationDate\" value={user.selectedDate} onChange={(event) => handleChange(event, index)} step=\"1\" />\n\n  //               </td>\n  //               <td>\n  //                 <Button\n  //                   className='btn btn-primary mx-2'\n  //                   disabled={!user.selectedDate}\n  //                   onClick={() => handleAppointmentBooking(user)}\n  //                 >\n  //                   Book Appointment\n  //                 </Button>\n  //               </td>\n  //             </tr>\n  //           ))}\n  //         </tbody>\n  //       </table>\n  //     </div>\n  //   </div>\n  // )\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,MAAM,QAAQ,iBAAiB;AAC9C,SAASC,WAAW,EAAEC,QAAQ,QAAQ,kBAAkB;AAExD,eAAe,SAASC,sBAAsBA,CAAA,EAAG;EAAAC,EAAA;EAC/C,MAAMC,QAAQ,GAAGJ,WAAW,EAAE;EAC9BK,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpBD,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,KAAK,CAACC,EAAE,CAACA,EAAE,CAACC,KAAK,CAAC;EACvC,MAAMC,SAAS,GAAGN,QAAQ,CAACG,KAAK;;EAEhC;EACD;EACC,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdkB,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,yCAAyC,EAAE;QAAEC,OAAO,EAAE;UAAC,eAAe,EAAI,UAASZ,QAAQ,CAACG,KAAK,CAACC,EAAE,CAACA,EAAE,CAACC,KAAM;QAAC;MAAE,CAAC,CAAC;MAClJ,MAAMQ,YAAY,GAAGH,MAAM,CAACI,IAAI,CAACC,GAAG,CAACC,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEC,YAAY,EAAE;MAAG,CAAC,CAAC,CAAC;MAC7ET,QAAQ,CAACK,YAAY,CAAC;IACxB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACjBjB,OAAO,CAACiB,KAAK,CAACA,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAACnB,EAAA,CApGuBD,sBAAsB;EAAA,QAC3BF,WAAW;AAAA;AAAAuB,EAAA,GADNrB,sBAAsB;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}